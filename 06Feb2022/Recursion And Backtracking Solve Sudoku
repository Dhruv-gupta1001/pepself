https://nados.io/question/solve-sudoku?zen=true

public static void solveSudoku(int[][] board, int i, int j) {
    // write yopur code here
    if(i==board.length ){
      display(board);
      return;
    }
    int ni=0;
    int nj=0;

    if(j==board[0].length-1){
      nj=0;
      ni=i+1;
    }else{
      nj=j+1;
      ni=i;
    }
    // System.out.println(i+"-"+j);
    // System.out.println(ni+","+nj);
    if(board[i][j]!=0){
      // System.out.println(i+"-"+j);
      solveSudoku(board,ni,nj);
    }else{
      for(int po=1;po<=9;po++){
        if(possible(board,i,j,po)){
          board[i][j]=po;
          // System.out.println(po);
          // System.out.println(i+","+j);
          solveSudoku(board,ni,nj);
          board[i][j]=0;
        }
      }
    }
  }

  public static boolean possible(int[][] board,int x,int y,int po){
    //in row
    for(int j=0;j<board[0].length;j++){
      if(board[x][j]==po){
        return false;
      }
    }

    //in col
    for(int i=0;i<board.length;i++){
      if(board[i][y]==po){
        return false;
      }
    }

    //sub matrix
    int lsmr=3* (x/3);
    int lsmc=3* (y/3);

    for(int i=0;i<3;i++){
      for(int j=0;j<3;j++){
        if(board[lsmr+i][lsmc+j]==po){
          return false;
        }
      }
    }

    return true;
  }
