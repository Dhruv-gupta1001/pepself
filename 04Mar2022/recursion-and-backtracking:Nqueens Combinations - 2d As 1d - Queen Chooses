https://nados.io/question/nqueens-combinations-2d-as-1d-queen-chooses?zen=true

import java.io.*;
import java.util.*;

public class Main {

    public static boolean IsQueenSafe(boolean[][] chess, int r, int c) {
        // write your code here
        //upar
        int upr=r-1;
        while(upr>=0){
            if(chess[upr][c]==true){
                return false;
            }
            upr--;
        }
        //piche
        int pc=c-1;
        while(pc>=0){
            if(chess[r][pc]==true){
                return false;
            }
            pc--;
        }
        //diaonal left
        int diglr=r-1;
        int diglc=c-1;
        
        while(diglr>=0 && diglc>=0){
            if(chess[diglr][diglc]==true){
                return false;
            }
            diglr--;
            diglc--;
        }
        
        //diagonal right
        
        int digrr=r-1;
        int digrc=c+1;
        
        while(digrr>=0 && digrc<chess.length){
            if(chess[digrr][digrc]==true){
                return false;
            }
            digrr--;
            digrc++;
        }
        return true ;

    }

    public static void nqueens(int qpsf, int tq, boolean[][] chess, int lcno) {
        if (qpsf == tq) {
            for (int row = 0; row < chess.length; row++) {
                for (int col = 0; col < chess.length; col++) {
                    System.out.print(chess[row][col] ? "q\t" : "-\t");
                }
                System.out.println();
            }
            System.out.println();
            return;
        }

        for (int i = lcno + 1; i < chess.length * chess.length; i++) {
            int row = i / chess.length;
            int col = i % chess.length;

            if (IsQueenSafe(chess, row, col)) {
                chess[row][col] = true;
                nqueens(qpsf + 1, tq, chess, row * chess.length + col);
                chess[row][col] = false;
            }
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        boolean[][] chess = new boolean[n][n];

        nqueens(0, n, chess, -1);
    }
}
