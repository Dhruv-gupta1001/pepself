class Node{
        int key,data;
        Node prev,next;
        
        public Node(int key,int data){
            this.key=key;
            this.data=data;
        }
        
        public Node(){}
    }
    
    HashMap<Integer,Node> hs=new HashMap<>();
    int c;
    Node head,tail;
    int s;
    
    public LRUCache(int capacity) {
      head=new Node();
        tail=new Node();
        head.next=tail;
        tail.prev=head;
        c=capacity;
        s=0;
    }

    public int get(int key) {
      if(hs.containsKey(key)){
            Node n=hs.get(key);
            moveToFirst(n);
            return n.data;
        }
        return -1;
    }

    // app name, app state
    public void put(int key, int value) {
      if(!hs.containsKey(key)){
            if(s==c){
                Node LRU=tail.prev;
                removeNode(LRU);
                hs.remove(LRU.key);
                Node n=new Node(key,value);
                hs.put(key,n);
                addFirst(n);
            }else{
                Node n=new Node(key,value);
                hs.put(key,n);
                addFirst(n);
                s++;
            }
        }
        else{
            Node n=hs.get(key);
            n.data=value;
            moveToFirst(n);
        }
    }

    public void addFirst(Node node){
        Node nbr=head.next;
        
        node.next=nbr;
        nbr.prev=node;
        
        node.prev=head;
        head.next=node;
        
    }
    
    public void removeNode(Node node){
        Node p=node.prev;
        Node n=node.next;
        
        p.next=n;
        n.prev=p;
        
        node.next=null;
        node.prev=null;
    }
    
    public void moveToFirst(Node node){
        removeNode(node);
        addFirst(node);
    }
