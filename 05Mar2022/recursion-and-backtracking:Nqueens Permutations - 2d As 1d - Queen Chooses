https://nados.io/question/nqueens-permutations-2d-as-1d-queen-chooses?zen=true

 public static boolean IsQueenSafe(int[][] chess, int r, int c) {
        // write your code here

        int n=chess.length;
        // horizontal
        for(int i=0;i<n;i++){
            if(chess[r][i]!=0){
                return false;
            }
        }

        //vertical

        for(int i=0;i<n;i++){
            if(chess[i][c]!=0){
                return false;
            }
        }

        //diag normal
        for(int i=r-1,j=c-1;i>=0 && j>=0;i--,j--){
            if(chess[i][j]!=0){
                return false;
            }
        }

        for(int i=r+1,j=c+1;i<n && j<n;i++,j++){
            if(chess[i][j]!=0){
                return false;
            }
        }
        
        //diag reverse
        for(int i=r-1,j=c+1;i>=0 && j<n;i--,j++){
            if(chess[i][j]!=0){
                return false;
            }
        }

        for(int i=r+1,j=c-1;i<n && j>=0;i++,j--){
            if(chess[i][j]!=0){
                return false;
            }
        }

        return true;

    }

    public static void nqueens(int qpsf, int tq, int[][] chess) {
        // write your code here

        if(qpsf==tq){
            for(int r=0;r<tq;r++){
                for(int c=0;c<tq;c++){
                    if(chess[r][c]!=0){
                        System.out.print("q"+chess[r][c]+"\t");
                    }else{
                        System.out.print("-"+"\t");
                    }
                }
                System.out.println();
            }
            System.out.println();
            return;
        }


        for(int r=0;r<tq;r++){
            for(int c=0;c<tq;c++){
                if(chess[r][c]==0 && IsQueenSafe(chess,r,c)){
                    chess[r][c]=qpsf+1;
                    nqueens(qpsf+1,tq,chess);
                    chess[r][c]=0;
                }
            }
        }
        
    }
