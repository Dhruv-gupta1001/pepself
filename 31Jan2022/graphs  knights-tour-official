https://www.pepcoding.com/resources/online-java-foundation/graphs/knights-tour-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn= new Scanner(System.in);
        int n= scn.nextInt();
        int r= scn.nextInt();
        int c= scn.nextInt();
        
        int[][] chess=new int[n][n];
        visited=new boolean[n][n];
        printKnightsTour(chess,r,c,1);
    
        
    }
    
    static boolean [][] visited;
    public static void printKnightsTour(int[][] chess, int r, int c, int upcomingMove) {
        
        if(r<0 || c<0 || r>=chess.length || c>=chess[0].length || visited[r][c]==true){
            return ;
        }
        
        if(upcomingMove == chess.length*chess[0].length){
            chess[r][c]=upcomingMove;
            displayBoard(chess);
            return;
        }
        
        
        visited[r][c]=true;
        chess[r][c]=upcomingMove;
        printKnightsTour(chess,r-2,c+1,upcomingMove+1);
        printKnightsTour(chess,r-1,c+2,upcomingMove+1);
        printKnightsTour(chess,r+1,c+2,upcomingMove+1);
        printKnightsTour(chess,r+2,c+1,upcomingMove+1);
        printKnightsTour(chess,r+2,c-1,upcomingMove+1);
        printKnightsTour(chess,r+1,c-2,upcomingMove+1);
        printKnightsTour(chess,r-1,c-2,upcomingMove+1);
        printKnightsTour(chess,r-2,c-1,upcomingMove+1);
        visited[r][c]=false;
    }

    public static void displayBoard(int[][] chess){
        for(int i = 0; i < chess.length; i++){
            for(int j = 0; j < chess[0].length; j++){
                System.out.print(chess[i][j] + " ");
            }
            System.out.println();
        }

        System.out.println();
    }
}
